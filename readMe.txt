The file named KC21.py was a part of my submission, along with another team meber that had no part of writing any code, for the International Science and Engineering Fair competition in 2022 and placed second on the state level. The flow chart named KC21flow.png explains this encryption program well, but it essentially mimics a quantem computing man in the middle attack of a sender, an eaves dropper, and a reciever trying to make a one time use pad using only public transmissions (simialr to RSA in classical computing) and then uses an originally developed algorithm to try and see if the sender and reciever can detect that their public one time use key has been eavesdropped. It works by the sender privately defining what quebits (a 1 or 0 of a binary transmission in the program written) are real and what are decoys, transmitting the message (the eaves dropper has a 50% chance of changing the binary transmission as they view it if the quebit and the measurement are mismatched), and the receiver would keep the final transmission. After the transmission is complete the sender would publicaly declare what quebits were real and what were "decoys", what the "decoy" quebits should read, and how to measure the transmission (not changing the state of the quebits, I.E. a 0 to a 1 in this context). The sender would then measure the decoy's state and if any quebits were mismatching then the eaves dropper would be detected. This algorithm was tested at different transmission lengths and then ouput into a csv file named KC21Output.csv.

Year code was created: 2021